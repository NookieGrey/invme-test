{"version":3,"sources":["app/Filter.js","app/ListItem.js","utils/dataGenerator.js","app/App.js","utils/debounce.js","utils/serviceWorker.js","index.js"],"names":["Wrapper","styled","div","props","visible","Title","Input","label","input","Button","button","Filter","state","toggleVisible","setState","onChange","event","filter","target","value","this","htmlFor","type","id","onClick","React","Component","Index","Body","ListItem","style","item","index","name","description","data","i","push","Math","random","repeat","App","filteredData","func","wait","immediate","timeout","context","args","arguments","later","apply","callNow","clearTimeout","setTimeout","debounce","search","rowRenderer","key","height","width","rowCount","length","rowHeight","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cf38aa3d.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n    position: fixed;\r\n    right: 25px;\r\n    top: 5px;\r\n    background: orangered;\r\n    padding: 10px;\r\n    display: flex;\r\n    \r\n    ${props => {\r\n      if (!props.visible) {\r\n        return `\r\n        & ${Title}, & ${Input} {\r\n          display: none;\r\n        }\r\n        `\r\n      }  \r\n    }}\r\n`;\r\n\r\nconst Title = styled.label`\r\n    color: #ffffff;\r\n    line-height: 20px;\r\n    height: 20px;\r\n`;\r\n\r\nconst Input = styled.input`\r\n    background: #ffffff;\r\n    border: 1px solid #cccccc;\r\n    border-radius: 3px;\r\n    height: 20px;\r\n    line-height: 20px;\r\n    margin: 0 10px;\r\n    outline: none;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    background: #ffffff;\r\n    outline: none;\r\n    border: 1px solid dodgerblue;\r\n    border-radius: 3px;\r\n    width: 30px;\r\n    height: 20px;\r\n    text-align: center;\r\n`;\r\n\r\nexport class Filter extends React.Component {\r\n  state = {\r\n    visible: true\r\n  };\r\n\r\n  toggleVisible = () => {\r\n    this.setState({visible: !this.state.visible})\r\n  };\r\n\r\n  onChange = (event) => {\r\n    this.props.filter(event.target.value)\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Wrapper visible={this.state.visible}>\r\n        <Title htmlFor=\"search\">\r\n          filter\r\n        </Title>\r\n        <Input\r\n          type=\"search\"\r\n          id=\"search\"\r\n          onChange={this.onChange}\r\n        />\r\n        <Button type=\"button\" onClick={this.toggleVisible}>\r\n          &#128065;\r\n        </Button>\r\n      </Wrapper>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    border-bottom: 1px solid #cccccc;\r\n    height: 100%;\r\n`;\r\n\r\nconst Index = styled.div`\r\n    flex: 150px;\r\n    align-items: center;\r\n    justify-content: center;\r\n    display: flex;\r\n    font-size: 25px;\r\n    font-weight: bolder;\r\n    margin: 5px 0 5px 5px;\r\n    border-left: 5px solid orangered;\r\n`;\r\n\r\nconst Title = styled.div`\r\n    font-size: 18px;\r\n    font-weight: bold;\r\n    color: orangered;\r\n    margin-bottom: 10px;\r\n`;\r\n\r\nconst Body = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    padding-right: 10px;\r\n`;\r\n\r\nexport function ListItem(props) {\r\n  return (\r\n    <Wrapper style={props.style}>\r\n      <Index>\r\n        {props.item.index}\r\n      </Index>\r\n      <Body>\r\n        <Title>\r\n          {props.item.name}\r\n        </Title>\r\n        <div>\r\n          {props.item.description}\r\n        </div>\r\n      </Body>\r\n    </Wrapper>\r\n  )\r\n}","const data = [];\r\n\r\nfor (let i =0; i < 100000; i++) {\r\n  data.push({\r\n    index: i,\r\n    name: `Name ${i} ${Math.random()}`,\r\n    description: `long text ${i} ${Math.random()}`.repeat(10)\r\n  })\r\n}\r\n\r\nexport default data;\r\n\r\n// const fs = require('fs');\r\n//\r\n// fs.writeFile(\"../../public/data.json\", JSON.stringify(data), function(err) {\r\n//\r\n//   if(err) {\r\n//     return console.log(err);\r\n//   }\r\n//\r\n//   console.log(\"The file was saved!\");\r\n// });","import React from 'react';\n\nimport {Filter} from \"./Filter\";\n\nimport {List, AutoSizer} from 'react-virtualized';\nimport {debounce} from \"../utils/debounce\";\n\nimport {ListItem} from \"./ListItem\";\nimport data from \"../utils/dataGenerator\";\n\nclass App extends React.Component {\n  state = {\n    filteredData: data,\n  };\n\n  filter = debounce((value) => {\n    if (!value) {\n      this.setState({\n        filteredData: data\n      })\n\n    } else {\n      const filteredData = data.filter(item => {\n        return (item.name.search(value) !== -1) || ((item.index + \"\").search(value) !== -1) || (item.description.search(value) !== -1)\n      });\n\n      this.setState({\n        filteredData: filteredData\n      })\n    }\n  }, 400);\n\n  rowRenderer = ({index, key, style}) => {\n    const item = this.state.filteredData[index];\n\n    return (\n      <ListItem key={key} style={style} item={item}/>\n    );\n  };\n\n  render() {\n    return (\n      <>\n        <AutoSizer>\n          {({height, width}) => (\n            <List\n              height={height}\n              rowCount={this.state.filteredData.length}\n              rowHeight={100}\n              rowRenderer={this.rowRenderer}\n              width={width}\n            />\n          )}\n        </AutoSizer>\n        <Filter filter={this.filter}/>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// Returns a function, that, as long as it continues to be invoked, will not\r\n// be triggered. The function will be called after it stops being called for\r\n// N milliseconds. If `immediate` is passed, trigger the function on the\r\n// leading edge, instead of the trailing.\r\nexport function debounce(func, wait, immediate) {\r\n  let timeout;\r\n  return function () {\r\n    let context = this, args = arguments;\r\n    let later = function () {\r\n      timeout = null;\r\n      if (!immediate) func.apply(context, args);\r\n    };\r\n    let callNow = immediate && !timeout;\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(later, wait);\r\n    if (callNow) func.apply(context, args);\r\n  };\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport * as serviceWorker from './utils/serviceWorker';\nimport './index.css';\nimport 'react-virtualized/styles.css'; // only needs to be imported once\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}